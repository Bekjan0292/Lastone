import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objs as go
from PIL import Image

# Streamlit page settings
st.set_page_config(page_title="Educational Stock Analysis", layout="wide", initial_sidebar_state="expanded")

# Custom CSS for dark mode and background images
st.markdown("""
    <style>
        body {
            background-color: #2E2E2E;
            color: white;
        }
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
        }
        .css-1kcyg20 {
            background: url('https://images.unsplash.com/photo-1518606373770-05d404f929d1') no-repeat center center fixed;
            background-size: cover;
        }
        h1, h2, h3 {
            color: #f1f1f1;
        }
        .stTextInput>div>div>input {
            background-color: #3e3e3e;
            color: white;
        }
        .stButton>button {
            background-color: #6200ea;
            color: white;
        }
        .stTable {
            background-color: #424242;
            color: white;
        }
        .stSidebar {
            background-color: #222222;
        }
    </style>
""", unsafe_allow_html=True)

# Helper functions
@st.cache_data
def load_stock_data(ticker, start_date, end_date):
    stock = yf.Ticker(ticker)
    return stock.history(start=start_date, end=end_date)

@st.cache_data
def get_company_info(ticker):
    stock = yf.Ticker(ticker)
    return {
        "Name": stock.info.get("shortName", "N/A"),
        "Sector": stock.info.get("sector", "N/A"),
        "Country": stock.info.get("country", "N/A"),
        "PE Ratio": stock.info.get("trailingPE", "N/A"),
        "PB Ratio": stock.info.get("priceToBook", "N/A"),
        "EPS": stock.info.get("trailingEps", "N/A"),
        "Revenue": stock.info.get("totalRevenue", "N/A"),
        "Net Income": stock.info.get("netIncomeToCommon", "N/A"),
        "Debt to Equity": stock.info.get("debtToEquity", "N/A"),
        "Dividend Yield": stock.info.get("dividendYield", "N/A"),
        "Profit Margin": stock.info.get("profitMargins", "N/A"),
        "Current Ratio": stock.info.get("currentRatio", "N/A"),
        "Quick Ratio": stock.info.get("quickRatio", "N/A"),
        "ROE": stock.info.get("returnOnEquity", "N/A"),
        "Logo": stock.info.get("logo_url", "N/A"),
    }

# Main app
def main():
    st.sidebar.header("Options")
    ticker = st.sidebar.text_input("Stock symbol:", "AAPL")
    start_date = st.sidebar.date_input("Start Date", pd.to_datetime("2021-01-01"))
    end_date = st.sidebar.date_input("End Date", pd.to_datetime("today"))

    # Analysis selection
    analysis_type = st.sidebar.selectbox("Select Analysis Type:", ["Fundamental Analysis", "Technical Analysis"])

    # Load data
    stock_data = load_stock_data(ticker, start_date, end_date)
    company_info = get_company_info(ticker)

    if analysis_type == "Fundamental Analysis":
        st.header(f"{company_info['Name']} - Fundamental Analysis")

        # Display company logo
        if company_info["Logo"] != "N/A":
            logo = Image.open(company_info["Logo"])
            st.image(logo, caption=f"{company_info['Name']} Logo", width=150)

        # Display basic company info
        st.write("### Company Information")
        st.write(f"**Sector:** {company_info['Sector']}")
        st.write(f"**Country:** {company_info['Country']}")

        # Display additional financial metrics in a table with explanations
        st.write("### Financial Metrics")
        metric_explanations = {
            "P/E Ratio": "The Price-to-Earnings (P/E) ratio measures a company's current share price relative to its per-share earnings. A high P/E may indicate overvaluation.",
            "P/B Ratio": "The Price-to-Book (P/B) ratio compares a company's market value to its book value. A ratio below 1 may suggest the stock is undervalued.",
            "EPS": "Earnings Per Share (EPS) represents the portion of a companyâ€™s profit allocated to each outstanding share of common stock.",
            "Revenue": "Revenue is the total income generated by the company from its operations. Growing revenue typically signals a healthy business.",
            "Net Income": "Net Income is the company's total earnings, factoring in all expenses, taxes, and costs. Higher net income often indicates profitability.",
            "Debt to Equity": "The Debt-to-Equity ratio compares a company's total debt to its shareholders' equity. A high ratio suggests the company is heavily financed by debt.",
            "Dividend Yield": "The Dividend Yield shows the percentage of the stock's price that is paid to shareholders in dividends.",
            "Profit Margin": "The Profit Margin shows what percentage of revenue turns into profit after all expenses. A higher margin is typically better.",
            "Current Ratio": "The Current Ratio measures a company's ability to cover short-term obligations with its short-term assets.",
            "Quick Ratio": "The Quick Ratio is similar to the current ratio, but excludes inventory, offering a stricter view of liquidity.",
            "ROE": "Return on Equity (ROE) measures the profitability of a company in relation to its equity. A higher ROE is a sign of efficient management."
        }

        # Displaying metrics and their explanations
        for metric, value in company_info.items():
            if metric in metric_explanations:
                st.write(f"**{metric}:** {value}")
                st.write(f"*Explanation:* {metric_explanations[metric]}")
                st.markdown("---")

        # Create a financial summary table
        df = pd.DataFrame.from_dict(company_info, orient='index', columns=['Value'])
        st.table(df.T)

        # Recommendations (Example logic)
        st.write("### Recommendation Based on Key Metrics")
        recommendation = ""
        description = ""
        
        # Example Recommendation Logic
        if company_info['PE Ratio'] != "N/A":
            if company_info['PE Ratio'] < 15:
                recommendation = "Buy"
                description = "The company is undervalued with a low P/E ratio, which may present a buying opportunity."
            elif company_info['PE Ratio'] > 25:
                recommendation = "Sell"
                description = "The company appears overvalued with a high P/E ratio, suggesting it might be a good time to sell."
            else:
                recommendation = "Hold"
                description = "The P/E ratio suggests the stock is fairly valued, and holding the stock may be the best option."
        
        st.write(f"**Recommendation:** {recommendation}")
        st.write(f"**Explanation:** {description}")

    elif analysis_type == "Technical Analysis":
        st.header(f"{company_info['Name']} - Technical Analysis")

        # Technical analysis code here (same as before)
        st.write("Technical analysis will be displayed here.")
    
if __name__ == "__main__":
    main()
